/*==============================
★★주민등록번호 유효성 검사★★
===============================*/
//실생활 공식 > 로직

/*
주민등록번호 검증 공식

	1. 마지막 자리를 제외한 앞자리 수를 규칙에 맞게 곱한다.
	123456-1234567 (주민번호)
	****** ****** -------------- 각 자릿수에 곱하기
	234567 892345  (각 자리에 곱해질 수)

	2. 규칙에 맞게 곱셈 연산을 수행한 결과를 모두 더한다.

	ex) 9 5 0 8 1 6   2 3 5 1 7 2 5
		* * * * * *   * * * * * * 
		2 3 4 5 6 7   8 9 2 3 4 5
		-----------------------------
		18 + 15 + 0 + 40 + 6 + 42 + 16 + 27 + 10 + 3 + 28 +10

		= 33 40 4 43 13 38 / 73 47 51 120 / 171 11/ 6

	3. 더해진 결과값을 11로 나누어서 나머지를 취한다.

		217 / 11 =  몫 : 19 나머지 : 8

	4. 11에서 나머지 8을 뺀 결과값을 구한다. 

		11 - 8 = 3

		3.의 처리 과정에서 나머지가 0인 경우, 11 - 0 = 11 > 1
						   나머지가 1인 경우, 11 - 1 = 10 > 0
						   이를 다시 10으로 나누어 나머지를 취한다

	5. 4의 연산 결과가 주민번호를 구성하는 마지막 숫자와 일치하는지의 여부를 비교한다.

	   일치하면 > 유효한 주민번호
	   불일치 > 잘못된 주민번호 

*/

//실행 예)
//주민번호 입력(xxxxxx-xxxxxxx) : 123456-12345678 > 입력 개수 초과 
//입력 오류~!!!
//계속하려면 아무 키나 누르세요...

//주민번호 입력(xxxxxx-xxxxxxx) : 123456-123456 > 입력 개수 부족
//입력 오류~!!!
//계속하려면 아무 키나 누르세요...

//주민번호 입력(xxxxxx-xxxxxxx) : 123456-1234567 > 입력 개수 부족
//정확한 주민번호~!!
//계속하려면 아무 키나 누르세요...

//주민번호 입력(xxxxxx-xxxxxxx) : 123456-1234567 > 유효하지 않은 주민번호
//정확한 주민번호~!!
//계속하려면 아무 키나 누르세요...

//문제 해결을 위한 추가 팁

//배열.length → 배열의 길이(배열방의 갯수) 반환
//문자열.length → 문자열의 길이 반환
//문자열.substring() → 문자열 추출
//문자열.substring(m,n) → 문자열의 m번째 위치에서 n-1번째 위치기까지 추출(인덱스는 0부터)
//문자열.substring(m) → 문자열의 m번째 위치에서 문자열의 끝까지 추출(인덱스는 0부터)

//음... 버퍼드리더가 아니라서... 받아들이는 부분에 에러가 난듯? nextInt부분 수정하기

import java.util.Scanner;

public class Test108
{
	public static void main(String[] args)
	{
		Scanner sc = new Scanner(System.in);

		//1. 굳이 반복문을 사용하지 않아도 됨.
		//주민번호의 각 자릿수에 곱하게 될 수 → 배열 형태로 구성

		int[] chk = {2,3,4,5,6,7,0,8,9,2,3,4,5};

		//곱셈 연산 후 누적합(각 곱셈의 결과를 더해 나가라...)
		//---------    ======
		//			   0으로 초기화
		int sum = 0;

		System.out.print("주민번호 입력(xxxxxx-xxxxxxx) : ");

		String num = sc.next(); // 14개 입력받아야 함(힝)

			if (num.length()!=14)
			{
				System.out.println("입력 오류~!!!");
				return; //프로그램 진행x → 프로그램 종료 return
			}
		
//반복처리 시킬거임 

			for(int i=0;i<13;i++)	//'-' 빼야함
		{
			//테스트
			//System.out.print(i + " ");
			if (i==6)
			{
				continue; //하던거 계속하는데, 뒷부분 무시하고('-')계속해라. 
			}

			sum += chk[i] * nextInt(num.substring(i,(i+1))); // < "7"이라는 문자열
			//스캐너로 들어오면 문자열을 어떻게 정수형태로 바꿔줌?
			//				<곱하기		<변환		<추출


		}	

		//-------------------------여기까지 수행하면 1과 2를 모두 끝낸 상황이며
		//							규칙에 맞게 곱셈 연산을 수행한 결과를 모두 더한 값은 
		//							변수 sum에 담겨있는 상황이 된다. 


		int namuji = sum % 11;

		//---------------- 여기까지 수행하면 3과 4를 모두 끝낸 상황이지만
		//					manuji에 대한 연산 결과 두 자리로 나올 경우
		//					주민번호 마지막 자리의 숫자와 비교를 수행할 수 없는 상황

		namuji = namuji % 10;

		if (namuji==nextInt(num.substring(13))) //→ 문자열의 m번째 위치에서 문자열의 끝까지 추출(인덱스는 0부터)
		{
			System.out.println("정확한 주민번호~~!!!");
		}
		else
		{
			System.out.println("틀린 주민번호~~!!!");
		}

		//주민번호 담을 배열 생성
		//int jumin[] = new int[12]; //=jumin[12] 이렇게 생겨난다. 





/*
		int n = 2; //n이라는 변수를 만듦(곱하기 용도)

		for(int i=0;i<jumin.length;i++)	//주민 범위에서 시작하겠다.
		{
			int result = jumin[i] * n;
			i++;
			n++;
		}
*/

	}
}
	
/*
// 1. 내 주민등록 번호 입력받음
		Scanner sc = new Scanner(System.in);
		
		do
		{
			System.out.print("주민번호 입력 : ");
			String num = sc.next(); //문자열을 입력받아야겠지
			int a = num.length();	//문자열의 개수를 a에 담고... 근데 형태 변환 때문에 불가하네
		}
		while (a==13); //문

		//여기까지 오면 문자열이 생김 (num = "950816 2351725")


// 2. 그걸 배열로 구성함	
		int jumin[] = new int[12]; //jumin이라는 배열이 13칸짜리로 생김
		//0 0 0 0 0 0 - 0 0 0 0 0 0 0
		//1 2 3 4 5 6	  7 8 9 10 11 12 13

		int n = 2; //n이라는 변수를 만듦(곱하기 용도)

		for(int i=0;i<jumin.length;i++)	//주민 범위에서 시작하겠다.
		{
				//i가 1씩 커질동안 n도 1씩 커짐
				//jumin[0]값을 2랑곱함
				int result = jumin[i] * n;
				i++;
				n++;
		}


//3-1. 결과값을 담아둘 배열이 필요함
		int[] result = new int[12]; //result[12]라는 배열이 생김


//4. 3,3-1번 결과값 전부 더해서, 11로 나눔

		int sum = 0; //누적합
		
		for (int i=0;i<result.length;i++)
		{
			sum += int result[i];
		}

		int namuji = sum % 11; //namuji는 나머지값이다.

		int fresult = 11 - namugi; //11에서 나머지를 뺀 값이 fresult

// 5. 4의 나머지가 나옴. 11에서 나머지 뺌. 2번 배열 마지막 자리와, 5번 결과가 같은지 확인
		//11에서 나머지를 뺀 값이 

		fresult = jumin[12]; //?인가?

		//맞다면 옳은 값, 틀리다면...

		if (fresult == jumin[12])
		{
			System.out.print("정확한 주민번호~");
		}
		else
		{
			System.out.print("유효하지 않은 주민번호~");		
		}
	}
}
*/
		//System.out.print()

		/*
		1. 내 주민등록 번호 입력받음
		
		System.out.print("주민번호 입력 : ")
		Scanner sc = new Scanner(System.in);
		num = sc.next; (문자열로 받고)
		num.substring(0) //문자열을 추출했음

		2. 그걸 배열로 구성함

		int[] jumin = new int[13]
		0 0 0 0 0 0 - 0 0 0 0 0 0 0
		1 2 3 4 5 6	  7 8 9 10 11 12 13
		
			int[] jumin = {9,5,0,8,1,6,2,3,5,1,7,2,5};
		
		3.배열 몇번째 자리랑 곱하는지 정함

			int n = 2;

			for(int i=0;i<jumin.length;i++)	//주민 범위에서 시작하겠다.
			{
					int result = jumin[i] * n;
					i++;
					n++;
			}

		3-1. 결과값을 담아둘 배열이 필요함
		int[] result = new int[12]; //= result[]

		4.3번 결과값 전부 더해서, 11로 나눔
		result[]+=result2; //누적합은
		
		int sum = 0; //누적합
		for (int i=0;i<result.length;i++)
		{
			sum += int result[i];
		}

		result3 = result2/11;

		5. 4의 나머지가 나옴. 11에서 나머지 뺌.
		result4 = 11-result3

		6. 2번 배열 마지막 자리와, 5번 결과가 같은지 확인
		result4 = jumin[13];?

		
		
		*/