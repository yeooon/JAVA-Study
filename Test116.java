
// 상속

/*
※ 메소드 오버라이딩(Method Overriding)의 특징

  - 메소드 이름, 리턴타입, 파라미터 수나 타입이 완전히 일치해야 한다.

  - 반드시 상속 관계가 있어야 한다.

  - 재정의된 하위 클래스의 메소드 접근제어지시자는 
	상위 클래스의 메소드 접근제어지시자보다 범위가 크거나 같아야 한다.
	예를 들어, 상위 클래스 메소드의 접근제어지시자가 『protected』인 경우
	하위 클래스가 이 메소드를 오버라이딩(Overriding)하는 경우
	접근제어지시자는『 protected』 또는 『public』 이어야 한다. 

  - 『static』, 『final』, 『private』 메소드는 오버라이딩 할 수 없다.
  
  -Exception의 추가가 불가능하다.
	즉, 상위 메소드가 가지고 있는 기존 예외 사항에
	새로운 Exception을 추가하는 것은 불가능하다는 것이다. 
*/

//부모 클래스(상위 클래스, super class)
class SuperTest116
{
	private int a = 5;
	protected int b = 10;
	public int c = 20;

	public void write()
	{
		System.out.println("Super Write() 메소드 : " + a + ":" + b + ":" + c);
	}
}

// 자식 클래스(하위 클래스, sub class)
class subTest116 extends SuperTest116
{
	/* //private는 물려받지 못함

	protected int b = 10;
	public int c = 20;

	public void write()
	{
		System.out.println("Super Write() 메소드 : " + a + ":" + b + ":" + c);
	}	
	*/

	protected int b = 100;

	public void print()
	{
		//System.out.println("Sub Write() 메소드 : " + a + ":" + b + ":" + c);
		//슈퍼클래스에서 선언된 변수 a에는 접근할 수 없다.
		//	→ private 변수이기 때문에...
		//System.out.println("Sub print() 메소드 : " + b + ":" + c);
		//System.out.println("Sub print() 메소드 : " + b );
		//System.out.println("Sub print() 메소드 : " + this.b );
		//System.out.println("Sub print() 메소드 : " + super.b );
		// 수퍼 클래스에서 선언된 b, 서브 클래스에서 선언된 b 왔다갔다 선택적일 수 있다.
		//System.out.println("Sub print() 메소드 : " + c );
		//System.out.println("Sub print() 메소드 : " + this.c );	//내 c
		//System.out.println("Sub print() 메소드 : " + super.c );	//내 c
		//-- 변수 c는 접근하는데 아무런 제약과 제한이 없다.
		// 슈퍼 클래스에서 선언된 c

	}	

	@Override
	public void write()
	{
		//System.out.println("sub Write() 메소드 : " + a + ":" + b + ":" + c);
		//-- 슈퍼 클래스에서 선언된 변수 a에는 접근할 수 없다.
		// → private 변수이기 때문에...
		System.out.println("Sub write() 메소드 : " + b + ":" + c);
	}
}

// main() 메소드를 포함하는 외부의 다른 클래스
public class Test116
{
	public static void main(String[] args)
	{
		//하위 클래스 인스턴스 생성
		subTest116 ob = new subTest116();

		ob.print();

		ob.write();
//		--==>>Super Write() 메소드 : 5:10:20
//		--==>>Sub write() 메소드 : 100:20

		System.out.println("------------------- 구분선");
//		--==>> 100
		System.out.println(ob.b);
//		--==>> 10
		System.out.println(((SuperTest116)ob).b);
//		--==>> Sub write() 메소드 : 100:20
		((SuperTest116)ob).write();


//변수는 따로 있는 거지만, 메소드는 덮어쓰는 개념이라 오버라이딩하면 복구가 안된다(부모껄로 되돌릴 수가 없다)
	}
}