/*=======================================
★★★정렬(Sort) 알고리즘★★
========================================*/

// ★ 앞에서 본 Selection Sort(Test109)나  Bubble Sort(Test110)의 성능은 같다.
//		(→ 반복의 횟수로 추정)
//		하지만, 향상된 Bubble Sort는 대상 데이터의 구조에 따라서
//		일반 Bubble Sort나 Selection Sort 보다 성능이 좋을 수 있다.

// 원본 데이터 : 61 15 20 22 30
//				 15 20 22 30 61 - 1회전 (스왑 발생 → true) → 다음 회전 진행 O
//				 15 20 22 30 61 - 2회전 (스왑 발생 → false) → 다음 회전 진행 X
// ==> 1회전 수행... 2회전 수행...을 해보았더니...
// 2회전에서 스왑(자리바꿈)이 전혀 일어나지 않았기 때문에
// 불필요한 추가 연산(더 이상의 회전)은 무의미한 것으로 판단하여
// 수행하지 않는다.

// 실행 예)
// Source Data : 10 50 20 30 40
// Sorted Data : 10 20 30 40 50

// 버블 정렬은 뒤에서부터 정렬되는 거라고 하네?

public class Test111
{
	public static void main(String[] args)
	{
		int arr[] = {10, 50, 20, 30, 40};
		/*
		10, 50, 20, 30, 40  == i , i+1
		==  --
		10, 20, 50, 30, 40
		    ==  --
		10, 20, 30, 50, 40
		        ==  --
		10, 20, 30, 40, 50
					==  --
		--------------------------- 1회전 → 스왑 발생
		10, 20, 30, 50, 40
		==  --
		10, 20, 30, 40, 50
			==  --
		10, 20, 30, 40, 50
				==  --
		--------------------------- 2회전 → 스왑 발생하지 않음
			X
			X
		--------------------------- 3회전 → X
			X
		--------------------------- 4회전 → X			
		*/
		System.out.print("Source Data");
		for (int n:arr)
			System.out.print(n + "  ");
		System.out.println();

		//향상된 Bubble Sort 구현

		int pass=0;
		boolean flag; //플래그 변수 자주 쓰이더라구

		do
		{
			flag = false; // 한번도 자리바꿈이 일어나지 않을 거라는 전제
			pass++;

			for (int i=0;i<arr.length-pass;i++)
					//	1<5-1	
			{
				//테스트
				//System.out.println("쑝");
				if (arr[i] > arr[i+1])
				{
					//자리바꿈이 일어났다?!
					arr[i] =  arr[i]^arr[i+1];
					arr[i+1]=arr[i+1]^arr[i];
					arr[i] =  arr[i]^arr[i+1];

					flag = true;	//자리 바꾸는게 단 한번이라도 일어나면 flag 변수는 true로 변경
				}
			}
		}
		while (flag);
		// flag 변수가 false라는 것은
		// 회전이 구분적으로 발생하는 동안 스왑이 일어나지 않은 경우로
		// 더 이상의 반복문 수행은 무의미한 것으로 판단 가능
	}
}

